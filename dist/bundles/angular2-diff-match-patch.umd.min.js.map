{"version":3,"sources":["../../src/dmp.service.ts","../../src/line-diff.component.ts","../../src/ng2-diff.module.ts"],"names":["DiffMatchPachService","prototype","diffClass","op","diff_match_patch.DIFF_INSERT","diff_match_patch.DIFF_DELETE","diffSymbol","diffTag","diffAttrName","isEmptyObject","o","Object","getOwnPropertyNames","length","isDefined","undefined","getTagAttrs","options","attrs","attribute","tagOption","attributes","tagOptions","retVal","assign","this","push","join","getHtmlPrefix","display","displayType","LINEDIFF","class","getHtmlSuffix","createHtmlLines","text","y","lines","split","createHtmlFromDiffs","diffs","x","data","patternAmp","patternLt","patternGt","html","diffData","replace","isString","myVar","String","assertArgumentsIsStrings","left","right","createDiffHtml","diff_match_patch.diff_match_patch","diff_main","INSDEL","createLineDiffHtml","dmp","chars","diff_linesToChars_","chars1","chars2","diff_charsToLines_","lineArray","LineDiffComponent","el","ngOnChanges","changes","nativeElement","innerHTML","ngOnInit","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","features","ɵɵProvidersFeature","ɵɵNgOnChangesFeature","Ng2DiffModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as diff_match_patch from 'google-diff-match-patch/diff_match_patch_uncompressed';\n\nexport class DiffMatchPachService {\n    private static displayType:any = {\n        INSDEL: 0,\n        LINEDIFF: 1\n    };\n\n    private diffClass(op) {\n        switch (op) {\n            case diff_match_patch.DIFF_INSERT:\n                return 'ins';\n            case diff_match_patch.DIFF_DELETE:\n                return 'del';\n            default: // case DIFF_EQUAL:\n                return 'match';\n        }\n    }\n\n    private diffSymbol(op) {\n        switch (op) {\n            case diff_match_patch.DIFF_INSERT:\n                return '+';\n            case diff_match_patch.DIFF_DELETE:\n                return '-';\n            default: // case DIFF_EQUAL:\n                return ' ';\n        }\n    }\n\n    private diffTag(op) {\n        switch (op) {\n            case diff_match_patch.DIFF_INSERT:\n                return 'ins';\n            case diff_match_patch.DIFF_DELETE:\n                return 'del';\n            default: // case DIFF_EQUAL:\n                return 'span';\n        }\n    }\n\n    private diffAttrName(op) {\n        switch (op) {\n            case diff_match_patch.DIFF_INSERT:\n                return 'insert';\n            case diff_match_patch.DIFF_DELETE:\n                return 'delete';\n            default: // case DIFF_EQUAL:\n                return 'equal';\n        }\n    }\n\n    private isEmptyObject(o) {\n        return Object.getOwnPropertyNames(o).length === 0;\n    }\n\n    private isDefined(o) {\n        return o != undefined;\n    }\n\n    private getTagAttrs(options, op, attrs?) {\n        var attributes = attrs || {};\n        var tagOptions = {};\n        var attribute;\n        var tagOption;\n        var retVal:string[] = [];\n\n        if (options != undefined && options.attrs != undefined) {\n            tagOptions = Object.assign(options.attrs[this.diffAttrName(op)] || {});\n        }\n\n        if (this.isEmptyObject(tagOptions) && this.isEmptyObject(attributes)) {\n            return '';\n        }\n\n        for (attribute in attributes) {\n            if (this.isDefined(tagOptions[attribute])) {\n                // The attribute defined in attributes should be first\n                tagOptions[attribute] = attributes[attribute] + ' ' + tagOptions[attribute];\n            } else {\n                tagOptions[attribute] = attributes[attribute];\n            }\n        }\n\n        /* eslint guard-for-in: \"off\" */\n        for (tagOption in tagOptions) {\n            retVal.push(tagOption + '=\"' + tagOptions[tagOption] + '\"');\n        }\n        return ' ' + retVal.join(' ');\n    }\n\n    private getHtmlPrefix(op, display, options) {\n        switch (display) {\n            case DiffMatchPachService.displayType.LINEDIFF:\n                return '<div class=\"' + this.diffClass(op) + '\"><span' + this.getTagAttrs(options, op, {class: 'noselect'}) + '>' + this.diffSymbol(op) + '</span>';\n            default: // case displayType.INSDEL:\n                return '<' + this.diffTag(op) + this.getTagAttrs(options, op) + '>';\n        }\n    }\n\n    private getHtmlSuffix(op, display) {\n        switch (display) {\n            case DiffMatchPachService.displayType.LINEDIFF:\n                return '</div>';\n            default: // case displayType.INSDEL:\n                return '</' + this.diffTag(op) + '>';\n        }\n    }\n\n    private createHtmlLines(text, op, options) {\n        var lines = text.split('\\n');\n        var y;\n        for (y = 0; y < lines.length; y++) {\n            if (lines[y].length === 0) {\n                continue;\n            }\n            lines[y] = this.getHtmlPrefix(op, DiffMatchPachService.displayType.LINEDIFF, options) + lines[y] + this.getHtmlSuffix(op, DiffMatchPachService.displayType.LINEDIFF);\n        }\n        return lines.join('');\n    }\n\n    private createHtmlFromDiffs(diffs, display, options) {\n        var patternAmp = /&/g;\n        var patternLt = /</g;\n        var patternGt = />/g;\n        var x;\n        var html:string[] = [];\n        var y;\n        var data;\n        var op;\n        var text;\n        var diffData = diffs;\n\n        for (x = 0; x < diffData.length; x++) {\n            data = diffData[x][1];\n            diffData[x][1] = data.replace(patternAmp, '&amp;')\n                .replace(patternLt, '&lt;')\n                .replace(patternGt, '&gt;');\n        }\n\n        for (y = 0; y < diffData.length; y++) {\n            op = diffData[y][0];\n            text = diffData[y][1];\n            if (display === DiffMatchPachService.displayType.LINEDIFF) {\n                html[y] = this.createHtmlLines(text, op, options);\n            } else {\n                html[y] = this.getHtmlPrefix(op, display, options) + text + this.getHtmlSuffix(op, display);\n            }\n        }\n        return html.join('');\n    }\n\n    private isString(myVar) {\n        return (typeof myVar === 'string' || myVar instanceof String);\n    }\n\n    private assertArgumentsIsStrings(left, right) {\n        return this.isString(left) && this.isString(right);\n    }\n\n    public createDiffHtml(left, right, options) {\n        var dmp;\n        var diffs;\n        if (this.assertArgumentsIsStrings(left, right)) {\n            dmp = new diff_match_patch.diff_match_patch();\n            diffs = dmp.diff_main(left, right);\n            return this.createHtmlFromDiffs(diffs, DiffMatchPachService.displayType.INSDEL, options);\n        }\n        return '';\n    }\n\n//    createProcessingDiffHtml: function createProcessingDiffHtml(left, right, options) {\n//    var dmp;\n//    var diffs;\n//    if (assertArgumentsIsStrings(left, right)) {\n//        dmp = new diff_match_patch();\n//        diffs = dmp.diff_main(left, right);\n//\n//        if (angular.isDefined(options) && angular.isDefined(options.editCost) && isFinite(options.editCost)) {\n//            dmp.Diff_EditCost = options.editCost; // eslint-disable-line camelcase\n//        }\n//\n//        dmp.diff_cleanupEfficiency(diffs);\n//        return createHtmlFromDiffs(diffs, displayType.INSDEL, options);\n//    }\n//    return '';\n//},\n//\n//    createSemanticDiffHtml: function createSemanticDiffHtml(left, right, options) {\n//    var dmp;\n//    var diffs;\n//    if (assertArgumentsIsStrings(left, right)) {\n//        dmp = new diff_match_patch();\n//        diffs = dmp.diff_main(left, right);\n//        dmp.diff_cleanupSemantic(diffs);\n//        return createHtmlFromDiffs(diffs, displayType.INSDEL, options);\n//    }\n//    return '';\n//},\n\n    public createLineDiffHtml(left, right, options) {\n        var dmp;\n        var chars;\n        var diffs;\n        if (this.assertArgumentsIsStrings(left, right)) {\n            dmp = new diff_match_patch.diff_match_patch();\n            chars = dmp.diff_linesToChars_(left, right);\n            diffs = dmp.diff_main(chars.chars1, chars.chars2, false);\n            dmp.diff_charsToLines_(diffs, chars.lineArray);\n            return this.createHtmlFromDiffs(diffs, DiffMatchPachService.displayType.LINEDIFF, options);\n        }\n        return '';\n    }\n}\n","import {Directive, Input, SimpleChanges, ElementRef, OnInit, OnChanges}         from '@angular/core';\n\nimport {DiffMatchPachService} from './dmp.service';\n\n@Directive({\n    selector: '[line-diff]',\n    providers: [\n        DiffMatchPachService\n    ]\n})\nexport class LineDiffComponent implements OnInit, OnChanges {\n    @Input() left:string;\n    @Input() right:string;\n    @Input() options:{} = {};\n\n    constructor(private el:ElementRef, private dmp:DiffMatchPachService) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        this.el.nativeElement.innerHTML = this.dmp.createLineDiffHtml(this.left, this.right, this.options);\n    }\n\n    public ngOnInit() {\n        this.el.nativeElement.innerHTML = this.dmp.createLineDiffHtml(this.left, this.right, this.options);\n    }\n}\n","import {LineDiffComponent} from './line-diff.component';\n\n// (<any>window).diff_match_patch = require('google-diff-match-patch/diff_match_patch_uncompressed');\n\nimport {NgModule} from '@angular/core';\n\n@NgModule({\n    exports: [\n        LineDiffComponent\n    ],\n    declarations: [\n        LineDiffComponent\n    ],\n    imports: []\n})\nexport class Ng2DiffModule {\n}\n"]}